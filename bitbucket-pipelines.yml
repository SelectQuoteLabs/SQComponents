image: node:erbium
definitions:
  caches:
    nodemodules: nodemodules
  services:
    docker:
      memory: 3072
initializeAndValidate: &initializeAndValidate
  - step:
      name: NPM Install, Lint, and Run Tests
      caches:
        - nodemodules
      script:
        - npm ci
        - npm run lint
        - npm test
buildAndDeployStorybook: &buildAndDeployStorybook
  name: Build & Deploy Storybook
  image: dustinewanselectquote/node-awscli:latest
  script:
    - npm ci
    - npx semantic-release
    - pip install -U awscli
    - eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
    - export LABEL=${AWS_REGISTRY_URL}:${ENVIRONMENT}_${BITBUCKET_BUILD_NUMBER}
    - >
      docker build
      -t $LABEL
      --build-arg ENVIRONMENT=${ENVIRONMENT}
      .
    - docker push $LABEL
    - sed -i -e "s|__LABEL__|$LABEL|g" task-definition.json
    - sed -i -e "s|__ENV__|${ENV}|g" task-definition.json
    - sed -i -e "s|__EXECUTION_ROLE_ARN__|${EXECUTION_ROLE}|g" task-definition.json
    - sed -i -e "s|__TASK_ROLE_ARN__|${TASK_ROLE}|g" task-definition.json
    - sed -i -e "s|__NGINX_REPO__|${NGINX_REPO}|g" task-definition.json
    - >
      aws ecs register-task-definition
      --family scplus-shared-components
      --cli-input-json file://task-definition.json
    - >
      aws ecs update-service
      --service scplus-shared-components
      --task-definition scplus-shared-components
      --cluster SharedServices
  services:
    - docker
pipelines:
  default:
    - <<: *initializeAndValidate
  custom:
    production:
      - step:
          deployment: production
          <<: *buildAndDeployStorybook
  branches:
    master:
      - step:
          deployment: production
          <<: *buildAndDeployStorybook
